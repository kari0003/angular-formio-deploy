{"version":3,"sources":["../../../projects/angular-formio/auth/src/auth.config.ts","../../../projects/angular-formio/auth/src/auth.service.ts","../../../projects/angular-formio/auth/src/auth.component.ts","../../../projects/angular-formio/auth/src/auth.component.html","../../../projects/angular-formio/auth/src/login/login.component.ts","../../../projects/angular-formio/auth/src/login/login.component.html","../../../projects/angular-formio/auth/src/register/register.component.ts","../../../projects/angular-formio/auth/src/auth.routes.ts","../../../projects/angular-formio/auth/src/register/register.component.html","../../../projects/angular-formio/auth/src/auth.module.ts"],"names":["FormioOauthType","FormioAuthConfig","factory","ɵfac","FormioAuthService","appConfig","config","_this","this","authenticated","formAccess","submissionAccess","is","user","appUrl","Formio","setBaseUrl","apiUrl","setProjectUrl","formOnly","console","error","loginForm","get","registerForm","onLogin","EventEmitter","onLogout","onRegister","onUser","onError","ready","Promise","resolve","reject","readyResolve","readyReject","events","on","logoutError","delayAuth","init","prototype","onLoginSubmit","submission","setUser","emit","onRegisterSubmit","currentUserPromise","projectReady","makeStaticRequest","then","project","each","access","type","roles","accessReady","forms","form","name","forEach","subAccess","oauth","window","location","hash","match","history","pushState","replace","ssoInit","options","currentUser","userReady","catch","err","namespace","localStorage","setItem","JSON","stringify","setUserRoles","removeItem","clearCache","getToken","role","roleName","indexOf","_id","logout","i0","ɵɵinject","i1","FormioAppConfig","FormioAuthComponent","selectors","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵelement","service","FormioAuthLoginComponent","ɵɵdirectiveInject","i0.ɵɵlistener","$event","i0.ɵɵproperty","FormioAuthRoutes","path","component","auth","children","redirectTo","pathMatch","login","register","FormioAuthRegisterComponent","FormioAuth","forRoot","extendRouter","forChild","imports","CommonModule","FormioModule","RouterModule","declarations"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nexport interface FormioAuthFormConfig {\n  path?: string;\n  form?: string;\n  component?: any;\n}\n\nexport interface FormioAuthRouteConfig {\n  auth?: any;\n  login?: any;\n  register?: any;\n}\n\n@Injectable()\nexport class FormioAuthConfig {\n  component?: any;\n  delayAuth?: any;\n  login?: FormioAuthFormConfig;\n  register?: FormioAuthFormConfig;\n  oauth?: FormioOAuthConfig;\n}\n\n\nexport interface FormioOAuthConfig {\n  type: FormioOauthType;\n  options: FormioOktaConfig | FormioSamlConfig;\n}\n\nexport enum FormioOauthType {\n  okta = 'okta',\n  saml = 'saml',\n}\n\nexport interface FormioOktaConfig extends OktaConfig {\n  formio?: any;\n}\n\nexport interface FormioSamlConfig {\n  relay: string;\n}\n\n// for more details about Okta configuration options see https://github.com/okta/okta-auth-js#configuration-reference\nexport interface OktaConfig {\n  url?: string;\n  tokenManager?: OktaTokenManagerConfig;\n  issuer?: string;\n  clientId?: string;\n  redirectUri?: string;\n  postLogoutRedirectUri?: string;\n  pkce?: boolean;\n  authorizeUrl?: string;\n  userinfoUrl?: string;\n  tokenUrl?: string;\n  ignoreSignature?: boolean;\n  maxClockSkew?: number;\n  scopes?: string[];\n  httpRequestClient?: Function;\n}\n\nexport interface OktaTokenManagerConfig {\n  storage?: string | {\n    getItem?: Function;\n    setItem?: Function;\n  };\n  secure?: boolean;\n  autoRenew?: boolean;\n  expireEarlySeconds?: number;\n  storageKey?: string;\n}\n","import { EventEmitter, Injectable, Inject } from '@angular/core';\nimport { FormioAuthConfig } from './auth.config';\nimport { FormioAppConfig } from 'angular-formio';\nimport { get, each } from 'lodash';\nimport { Formio } from 'formiojs';\n\n@Injectable()\nexport class FormioAuthService {\n  public user: any;\n  public authenticated = false;\n\n  public loginForm: string;\n  public onLogin: EventEmitter<object>;\n  public onLogout: EventEmitter<object>;\n\n  public registerForm: string;\n  public onRegister: EventEmitter<object>;\n  public onUser: EventEmitter<object>;\n  public onError: EventEmitter<any>;\n\n  public ready: Promise<boolean>;\n  public readyResolve: any;\n  public readyReject: any;\n\n  public projectReady?: Promise<any>;\n  public accessReady?: Promise<any>;\n  public userReady?: Promise<any>;\n  public formAccess: any = {};\n  public submissionAccess: any = {};\n  public roles: any;\n  public is: any = {};\n\n  constructor(\n    public appConfig: FormioAppConfig,\n    public config: FormioAuthConfig\n  ) {\n    this.user = null;\n\n    if (this.appConfig && this.appConfig.appUrl) {\n      Formio.setBaseUrl(this.appConfig.apiUrl);\n      Formio.setProjectUrl(this.appConfig.appUrl);\n      Formio.formOnly = !!this.appConfig.formOnly;\n    } else {\n      console.error('You must provide an AppConfig within your application!');\n    }\n\n    this.loginForm =\n      this.appConfig.appUrl +\n      '/' +\n      get(this.config, 'login.form', 'user/login');\n    this.registerForm =\n      this.appConfig.appUrl +\n      '/' +\n      get(this.config, 'register.form', 'user/register');\n    this.onLogin = new EventEmitter();\n    this.onLogout = new EventEmitter();\n    this.onRegister = new EventEmitter();\n    this.onUser = new EventEmitter();\n    this.onError = new EventEmitter();\n\n    this.ready = new Promise((resolve: any, reject: any) => {\n      this.readyResolve = resolve;\n      this.readyReject = reject;\n    });\n\n    // Register for the core events.\n    Formio.events.on('formio.badToken', () => this.logoutError());\n    Formio.events.on('formio.sessionExpired', () => this.logoutError());\n    if (!this.config.delayAuth) {\n      this.init();\n    }\n  }\n\n  onLoginSubmit(submission: object) {\n    this.setUser(submission);\n    this.onLogin.emit(submission);\n  }\n\n  onRegisterSubmit(submission: object) {\n    this.setUser(submission);\n    this.onRegister.emit(submission);\n  }\n\n  init() {\n    this.projectReady = Formio.makeStaticRequest(this.appConfig.appUrl).then(\n      (project: any) => {\n        each(project.access, (access: any) => {\n          this.formAccess[access.type] = access.roles;\n        });\n      },\n      (): any => {\n        this.formAccess = {};\n        return null;\n      }\n    );\n\n    // Get the access for this project.\n    this.accessReady = Formio.makeStaticRequest(\n      this.appConfig.appUrl + '/access'\n    ).then(\n      (access: any) => {\n        each(access.forms, (form: any) => {\n          this.submissionAccess[form.name] = {};\n          form.submissionAccess.forEach((subAccess: any) => {\n            this.submissionAccess[form.name][subAccess.type] = subAccess.roles;\n          });\n        });\n        this.roles = access.roles;\n        return access;\n      },\n      (): any => {\n        this.roles = {};\n        return null;\n      }\n    );\n\n    let currentUserPromise: Promise<any>;\n    if (this.config.oauth) {\n      // Make a fix to the hash to remove starting \"/\" that angular might put there.\n      if (window.location.hash && window.location.hash.match(/^#\\/access_token/)) {\n        history.pushState(null, null, window.location.hash.replace(/^#\\/access_token/, '#access_token'));\n      }\n\n      // Initiate the SSO if they provide oauth settings.\n      currentUserPromise = Formio.ssoInit(this.config.oauth.type, this.config.oauth.options);\n    } else {\n      currentUserPromise = Formio.currentUser();\n    }\n\n    this.userReady = currentUserPromise.then((user: any) => {\n      this.setUser(user);\n      return user;\n    });\n\n    // Trigger we are redy when all promises have resolved.\n    if (this.accessReady) {\n      this.accessReady\n        .then(() => this.projectReady)\n        .then(() => this.userReady)\n        .then(() => this.readyResolve(true))\n        .catch((err: any) => this.readyReject(err));\n    }\n  }\n\n  setUser(user: any) {\n    const namespace = Formio.namespace || 'formio';\n    if (user) {\n      this.user = user;\n      localStorage.setItem(`${namespace}AppUser`, JSON.stringify(user));\n      this.setUserRoles();\n    } else {\n      this.user = null;\n      this.is = {};\n      localStorage.removeItem(`${namespace}AppUser`);\n      Formio.clearCache();\n      Formio.setUser(null);\n    }\n\n    this.authenticated = !!Formio.getToken();\n    this.onUser.emit(this.user);\n  }\n\n  setUserRoles() {\n    if (this.accessReady) {\n      this.accessReady.then(() => {\n        each(this.roles, (role: any, roleName: string) => {\n          if (this.user.roles.indexOf(role._id) !== -1) {\n            this.is[roleName] = true;\n          }\n        });\n      });\n    }\n  }\n\n  logoutError() {\n    this.setUser(null);\n    const namespace = Formio.namespace || 'formio';\n    localStorage.removeItem(`${namespace}Token`);\n    this.onError.emit();\n  }\n\n  logout() {\n    this.setUser(null);\n    const namespace = Formio.namespace || 'formio';\n    localStorage.removeItem(`${namespace}Token`);\n    Formio.logout()\n      .then(() => this.onLogout.emit())\n      .catch(() => this.logoutError());\n  }\n}\n","import { Component } from '@angular/core';\n@Component({\n  templateUrl: './auth.component.html'\n})\nexport class FormioAuthComponent {}\n","<div class=\"card card-primary panel panel-default\">\n  <div class=\"card-header panel-heading\">\n    <ul class=\"nav nav-tabs card-header-tabs\">\n      <li class=\"nav-item\" role=\"presentation\" routerLinkActive=\"active\"><a class=\"nav-link\" routerLink=\"login\" routerLinkActive=\"active\">Login</a></li>\n      <li class=\"nav-item\" role=\"presentation\" routerLinkActive=\"active\"><a class=\"nav-link\" routerLink=\"register\" routerLinkActive=\"active\">Register</a></li>\n    </ul>\n  </div>\n  <div class=\"card-body panel-body\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { FormioAuthService } from '../auth.service';\n@Component({\n  templateUrl: './login.component.html'\n})\nexport class FormioAuthLoginComponent {\n  constructor(public service: FormioAuthService) {}\n}\n","<formio [src]=\"service.loginForm\" (submit)=\"service.onLoginSubmit($event)\"></formio>\n","import { Component } from '@angular/core';\nimport { FormioAuthService } from '../auth.service';\n@Component({\n  templateUrl: './register.component.html'\n})\nexport class FormioAuthRegisterComponent {\n  constructor(public service: FormioAuthService) {}\n}\n","import { Routes } from '@angular/router';\nimport { FormioAuthRouteConfig } from './auth.config';\nimport { FormioAuthComponent } from './auth.component';\nimport { FormioAuthLoginComponent } from './login/login.component';\nimport { FormioAuthRegisterComponent } from './register/register.component';\nexport function FormioAuthRoutes(config?: FormioAuthRouteConfig): Routes {\n  return [\n    {\n      path: '',\n      component: config && config.auth ? config.auth : FormioAuthComponent,\n      children: [\n        {\n          path: '',\n          redirectTo: 'login',\n          pathMatch: 'full'\n        },\n        {\n          path: 'login',\n          component: config && config.login ? config.login : FormioAuthLoginComponent\n        },\n        {\n          path: 'register',\n          component: config && config.register ? config.register : FormioAuthRegisterComponent\n        }\n      ]\n    }\n  ];\n}\n","<formio [src]=\"service.registerForm\" (submit)=\"service.onRegisterSubmit($event)\"></formio>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormioModule } from 'angular-formio';\nimport { FormioAuthComponent } from './auth.component';\nimport { FormioAuthLoginComponent } from './login/login.component';\nimport { FormioAuthRegisterComponent } from './register/register.component';\nimport { FormioAuthRouteConfig } from './auth.config';\nimport { FormioAuthRoutes } from './auth.routes';\nimport { extendRouter } from 'angular-formio';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormioModule,\n    RouterModule\n  ],\n  declarations: [\n    FormioAuthComponent,\n    FormioAuthLoginComponent,\n    FormioAuthRegisterComponent\n  ]\n})\nexport class FormioAuth {\n  static forRoot(config?: FormioAuthRouteConfig): any {\n    return extendRouter(FormioAuth, config, FormioAuthRoutes);\n  }\n  static forChild(config?: FormioAuthRouteConfig): any {\n    return extendRouter(FormioAuth, config, FormioAuthRoutes);\n  }\n}\n"]}