import { Observable } from 'rxjs';
import { Formio } from 'formiojs';
export class FormioService {
    constructor(url, options) {
        this.url = url;
        this.options = options;
        this.formio = new Formio(this.url, this.options);
    }
    requestWrapper(fn) {
        let record;
        let called = false;
        return Observable.create((observer) => {
            try {
                if (!called) {
                    called = true;
                    fn()
                        .then((_record) => {
                        record = _record;
                        observer.next(record);
                        observer.complete();
                    })
                        .catch((err) => observer.error(err));
                }
                else if (record) {
                    observer.next(record);
                    observer.complete();
                }
            }
            catch (err) {
                observer.error(err);
            }
        });
    }
    saveForm(form, options) {
        return this.requestWrapper(() => this.formio.saveForm(form, options));
    }
    loadForm(query, options) {
        return this.requestWrapper(() => this.formio.loadForm(query, options));
    }
    loadForms(query, options) {
        return this.requestWrapper(() => this.formio.loadForms(query, options));
    }
    loadSubmission(query, options) {
        return this.requestWrapper(() => this.formio.loadSubmission(query, options));
    }
    userPermissions(user, form, submission) {
        return this.requestWrapper(() => this.formio.userPermissions(user, form, submission));
    }
    deleteSubmission(data, options) {
        return this.requestWrapper(() => this.formio.deleteSubmission(data, options));
    }
    saveSubmission(submission, options) {
        return this.requestWrapper(() => this.formio.saveSubmission(submission, options));
    }
    loadSubmissions(query, options) {
        return this.requestWrapper(() => this.formio.loadSubmissions(query, options));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWlvLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2thcmkwMDAzL3Byb2plY3RzL2FuZ3VsYXItZm9ybWlvL3Byb2plY3RzL2FuZ3VsYXItZm9ybWlvL3NyYy8iLCJzb3VyY2VzIjpbImZvcm1pby5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQVksTUFBTSxNQUFNLENBQUM7QUFFNUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQyxNQUFNLE9BQU8sYUFBYTtJQUV4QixZQUFtQixHQUFXLEVBQVMsT0FBZ0I7UUFBcEMsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUFTLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDckQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBQ0QsY0FBYyxDQUFDLEVBQU87UUFDcEIsSUFBSSxNQUFXLENBQUM7UUFDaEIsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ25CLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQXVCLEVBQUUsRUFBRTtZQUNuRCxJQUFJO2dCQUNGLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ1gsTUFBTSxHQUFHLElBQUksQ0FBQztvQkFDZCxFQUFFLEVBQUU7eUJBQ0QsSUFBSSxDQUFDLENBQUMsT0FBWSxFQUFFLEVBQUU7d0JBQ3JCLE1BQU0sR0FBRyxPQUFPLENBQUM7d0JBQ2pCLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7d0JBQ3RCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFDdEIsQ0FBQyxDQUFDO3lCQUNELEtBQUssQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUM3QztxQkFBTSxJQUFJLE1BQU0sRUFBRTtvQkFDakIsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDdEIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2lCQUNyQjthQUNGO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1osUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNyQjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNELFFBQVEsQ0FBQyxJQUFnQixFQUFFLE9BQWE7UUFDdEMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFDRCxRQUFRLENBQUMsS0FBVyxFQUFFLE9BQWE7UUFDakMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFDRCxTQUFTLENBQUMsS0FBVSxFQUFFLE9BQWE7UUFDakMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFDRCxjQUFjLENBQUMsS0FBVyxFQUFFLE9BQWE7UUFDdkMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFDRCxlQUFlLENBQUMsSUFBUyxFQUFFLElBQVMsRUFBRSxVQUFlO1FBQ25ELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUNELGdCQUFnQixDQUFDLElBQVUsRUFBRSxPQUFhO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFDRCxjQUFjLENBQUMsVUFBYyxFQUFFLE9BQWE7UUFDMUMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFDRCxlQUFlLENBQUMsS0FBVyxFQUFFLE9BQWE7UUFDeEMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIE9ic2VydmVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGb3JtaW9Gb3JtIH0gZnJvbSAnLi9mb3JtaW8uY29tbW9uJztcbmltcG9ydCB7IEZvcm1pbyB9IGZyb20gJ2Zvcm1pb2pzJztcblxuZXhwb3J0IGNsYXNzIEZvcm1pb1NlcnZpY2Uge1xuICBwdWJsaWMgZm9ybWlvOiBhbnk7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB1cmw6IHN0cmluZywgcHVibGljIG9wdGlvbnM/OiBvYmplY3QpIHtcbiAgICB0aGlzLmZvcm1pbyA9IG5ldyBGb3JtaW8odGhpcy51cmwsIHRoaXMub3B0aW9ucyk7XG4gIH1cbiAgcmVxdWVzdFdyYXBwZXIoZm46IGFueSkge1xuICAgIGxldCByZWNvcmQ6IGFueTtcbiAgICBsZXQgY2FsbGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcjogT2JzZXJ2ZXI8YW55PikgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIGZuKClcbiAgICAgICAgICAgIC50aGVuKChfcmVjb3JkOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgcmVjb3JkID0gX3JlY29yZDtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChyZWNvcmQpO1xuICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyOiBhbnkpID0+IG9ic2VydmVyLmVycm9yKGVycikpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZCkge1xuICAgICAgICAgIG9ic2VydmVyLm5leHQocmVjb3JkKTtcbiAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBzYXZlRm9ybShmb3JtOiBGb3JtaW9Gb3JtLCBvcHRpb25zPzogYW55KTogT2JzZXJ2YWJsZTxGb3JtaW9Gb3JtPiB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdFdyYXBwZXIoKCkgPT4gdGhpcy5mb3JtaW8uc2F2ZUZvcm0oZm9ybSwgb3B0aW9ucykpO1xuICB9XG4gIGxvYWRGb3JtKHF1ZXJ5PzogYW55LCBvcHRpb25zPzogYW55KTogT2JzZXJ2YWJsZTxGb3JtaW9Gb3JtPiB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdFdyYXBwZXIoKCkgPT4gdGhpcy5mb3JtaW8ubG9hZEZvcm0ocXVlcnksIG9wdGlvbnMpKTtcbiAgfVxuICBsb2FkRm9ybXMocXVlcnk6IGFueSwgb3B0aW9ucz86IGFueSk6IE9ic2VydmFibGU8Rm9ybWlvRm9ybT4ge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3RXcmFwcGVyKCgpID0+IHRoaXMuZm9ybWlvLmxvYWRGb3JtcyhxdWVyeSwgb3B0aW9ucykpO1xuICB9XG4gIGxvYWRTdWJtaXNzaW9uKHF1ZXJ5PzogYW55LCBvcHRpb25zPzogYW55KTogT2JzZXJ2YWJsZTx7fT4ge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3RXcmFwcGVyKCgpID0+IHRoaXMuZm9ybWlvLmxvYWRTdWJtaXNzaW9uKHF1ZXJ5LCBvcHRpb25zKSk7XG4gIH1cbiAgdXNlclBlcm1pc3Npb25zKHVzZXI6IGFueSwgZm9ybTogYW55LCBzdWJtaXNzaW9uOiBhbnkpOiBPYnNlcnZhYmxlPHt9PiB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdFdyYXBwZXIoKCkgPT4gdGhpcy5mb3JtaW8udXNlclBlcm1pc3Npb25zKHVzZXIsIGZvcm0sIHN1Ym1pc3Npb24pKTtcbiAgfVxuICBkZWxldGVTdWJtaXNzaW9uKGRhdGE/OiBhbnksIG9wdGlvbnM/OiBhbnkpOiBPYnNlcnZhYmxlPHt9PiB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdFdyYXBwZXIoKCkgPT4gdGhpcy5mb3JtaW8uZGVsZXRlU3VibWlzc2lvbihkYXRhLCBvcHRpb25zKSk7XG4gIH1cbiAgc2F2ZVN1Ym1pc3Npb24oc3VibWlzc2lvbjoge30sIG9wdGlvbnM/OiBhbnkpOiBPYnNlcnZhYmxlPHt9PiB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdFdyYXBwZXIoKCkgPT4gdGhpcy5mb3JtaW8uc2F2ZVN1Ym1pc3Npb24oc3VibWlzc2lvbiwgb3B0aW9ucykpO1xuICB9XG4gIGxvYWRTdWJtaXNzaW9ucyhxdWVyeT86IGFueSwgb3B0aW9ucz86IGFueSk6IE9ic2VydmFibGU8e30+IHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0V3JhcHBlcigoKSA9PiB0aGlzLmZvcm1pby5sb2FkU3VibWlzc2lvbnMocXVlcnksIG9wdGlvbnMpKTtcbiAgfVxufVxuIl19